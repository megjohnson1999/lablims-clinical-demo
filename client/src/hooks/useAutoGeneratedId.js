import { useState, useEffect } from 'react';
import axios from 'axios';

/**
 * Custom hook to fetch and manage auto-generated IDs
 * @param {string} entityType - The type of entity ('collaborator', 'project', or 'specimen')
 * @param {boolean} isEditMode - Whether the form is in edit mode (don't fetch new ID if editing)
 * @returns {Object} - { id, nextId, loading, error, refetch }
 */
const useAutoGeneratedId = (entityType, isEditMode = false) => {
  const [id, setId] = useState(null);
  const [nextId, setNextId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const peekNextId = async () => {
    if (isEditMode) {
      return; // Don't fetch new ID if editing existing record
    }

    setLoading(true);
    setError(null);

    try {
      // Use peek endpoint to see next ID without incrementing
      const response = await axios.get(`/api/ids/peek/${entityType}`);
      if (response.data.success) {
        setId(response.data.data.nextId);
        setNextId(response.data.data.nextId);
      } else {
        throw new Error(response.data.error || 'Failed to peek next ID');
      }
    } catch (err) {
      console.error(`Error peeking ${entityType} ID:`, err);
      setError(err.message || 'Failed to peek next ID');
    } finally {
      setLoading(false);
    }
  };

  const generateActualId = async () => {
    try {
      // Only increment sequence when actually creating the record
      const response = await axios.get(`/api/ids/next-${entityType}`);
      if (response.data.success) {
        return response.data.data.id;
      } else {
        throw new Error(response.data.error || 'Failed to generate ID');
      }
    } catch (err) {
      console.error(`Error generating ${entityType} ID:`, err);
      throw err;
    }
  };

  useEffect(() => {
    peekNextId();
  }, [entityType, isEditMode]);

  return {
    id,
    nextId,
    loading,
    error,
    refetch: peekNextId,
    generateActualId
  };
};

export default useAutoGeneratedId;