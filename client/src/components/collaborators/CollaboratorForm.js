import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Grid,
  TextField,
  CircularProgress,
  Alert,
  IconButton,
} from '@mui/material';
import {
  Save as SaveIcon,
  ArrowBack as ArrowBackIcon,
} from '@mui/icons-material';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { collaboratorAPI } from '../../services/api';
import { cleanFormData } from '../../utils/helpers';
import { toast } from 'react-toastify';
import useAutoGeneratedId from '../../hooks/useAutoGeneratedId';
import AutoGeneratedIdField from '../common/AutoGeneratedIdField';

const CollaboratorForm = () => {
  const { id } = useParams();
  const isEditing = Boolean(id);
  const [formData, setFormData] = useState({
    pi_name: '',
    pi_institute: '',
    irb_id: '',
    pi_email: '',
    pi_phone: '',
    pi_fax: '',
    internal_contact: '',
    comments: '',
  });
  const [loading, setLoading] = useState(false);
  const [fetchingData, setFetchingData] = useState(isEditing);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  
  // Hook for auto-generated ID
  const { 
    id: previewId, 
    nextId, 
    loading: idLoading, 
    error: idError, 
    refetch: refetchId,
    generateActualId
  } = useAutoGeneratedId('collaborator', isEditing);

  useEffect(() => {
    if (isEditing) {
      const fetchCollaborator = async () => {
        try {
          const response = await collaboratorAPI.getById(id);
          setFormData(response.data);
        } catch (err) {
          console.error('Error fetching collaborator', err);
          setError('Failed to load collaborator details');
        } finally {
          setFetchingData(false);
        }
      };

      fetchCollaborator();
    } else {
      setFetchingData(false);
    }
  }, [id, isEditing]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const cleanedData = cleanFormData(formData);
      
      if (isEditing) {
        await collaboratorAPI.update(id, cleanedData);
        toast.success('Collaborator updated successfully');
      } else {
        // Backend now generates ID at creation time
        const response = await collaboratorAPI.create(cleanedData);
        const createdCollaborator = response.data || response;
        toast.success(`Collaborator created successfully with ID ${createdCollaborator.collaborator_number}`);
      }
      
      navigate('/collaborators');
    } catch (err) {
      console.error('Error saving collaborator', err);
      setError('Failed to save collaborator: ' + (err.response?.data?.msg || err.message));
      setLoading(false);
    }
  };

  if (fetchingData) {
    return (
      <Box display="flex" justifyContent="center" my={4}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box className="collaborator-form page-container">
      <Box display="flex" alignItems="center" mb={3}>
        <IconButton
          component={Link}
          to="/collaborators"
          sx={{ mr: 1 }}
        >
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h4" component="h1">
          {isEditing ? 'Edit Collaborator' : 'New Collaborator'}
        </Typography>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <Paper sx={{ p: 3 }}>
        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            {!isEditing && (
              <Grid item xs={12} md={6}>
                <AutoGeneratedIdField
                  label="Collaborator Number"
                  value={previewId}
                  nextId={nextId}
                  loading={idLoading}
                  error={idError}
                  onRefresh={refetchId}
                  isEditMode={isEditing}
                  helperText="Sequential number assigned to this collaborator upon creation"
                />
              </Grid>
            )}
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="PI Name *"
                name="pi_name"
                value={formData.pi_name}
                onChange={handleChange}
                required
                helperText="Enter the principal investigator's name"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="PI Institution *"
                name="pi_institute"
                value={formData.pi_institute}
                onChange={handleChange}
                required
                helperText="Enter the institution or organization"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="IRB ID"
                name="irb_id"
                value={formData.irb_id}
                onChange={handleChange}
                helperText="Enter the IRB protocol ID (if applicable)"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="PI Email"
                name="pi_email"
                type="email"
                value={formData.pi_email}
                onChange={handleChange}
                helperText="Enter the PI's email address"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="PI Phone"
                name="pi_phone"
                value={formData.pi_phone}
                onChange={handleChange}
                helperText="Enter the PI's phone number"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="PI Fax"
                name="pi_fax"
                value={formData.pi_fax}
                onChange={handleChange}
                helperText="Enter the PI's fax number (if applicable)"
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Internal Contact"
                name="internal_contact"
                value={formData.internal_contact}
                onChange={handleChange}
                helperText="Enter the name of the internal contact person for this collaborator"
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Comments"
                name="comments"
                value={formData.comments}
                onChange={handleChange}
                multiline
                rows={4}
                helperText="Add any additional notes or comments about this collaborator"
              />
            </Grid>
            
            <Grid item xs={12}>
              <Box display="flex" justifyContent="flex-end" mt={2}>
                <Button
                  component={Link}
                  to="/collaborators"
                  variant="outlined"
                  sx={{ mr: 1 }}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  startIcon={<SaveIcon />}
                  disabled={loading}
                >
                  {loading ? 'Saving...' : isEditing ? 'Update Collaborator' : 'Create Collaborator'}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Paper>
    </Box>
  );
};

export default CollaboratorForm;