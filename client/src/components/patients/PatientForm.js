import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Grid,
  TextField,
  CircularProgress,
  Alert,
  IconButton,
} from '@mui/material';
import {
  Save as SaveIcon,
  ArrowBack as ArrowBackIcon,
} from '@mui/icons-material';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { patientAPI } from '../../services/api';
import { cleanFormData } from '../../utils/helpers';
import { toast } from 'react-toastify';
import useAutoGeneratedId from '../../hooks/useAutoGeneratedId';
import AutoGeneratedIdField from '../common/AutoGeneratedIdField';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

const PatientForm = () => {
  const { id } = useParams();
  const isEditing = Boolean(id);
  const [formData, setFormData] = useState({
    external_id: '',
    first_name: '',
    last_name: '',
    date_of_birth: null,
    diagnosis: '',
    physician_first_name: '',
    physician_last_name: '',
    comments: '',
  });
  const [loading, setLoading] = useState(false);
  const [fetchingData, setFetchingData] = useState(isEditing);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  
  // Hook for auto-generated ID
  const { 
    id: previewId, 
    nextId, 
    loading: idLoading, 
    error: idError, 
    refetch: refetchId,
    generateActualId
  } = useAutoGeneratedId('patient', isEditing);

  useEffect(() => {
    if (isEditing) {
      const fetchPatient = async () => {
        try {
          const response = await patientAPI.getById(id);
          const patientData = response.data;
          
          // Format dates for form inputs
          if (patientData.date_of_birth) {
            patientData.date_of_birth = new Date(patientData.date_of_birth);
          }
          
          setFormData({
            ...formData,
            ...patientData,
          });
        } catch (err) {
          console.error('Error fetching patient', err);
          setError('Failed to load patient details');
        } finally {
          setFetchingData(false);
        }
      };

      fetchPatient();
    } else {
      setFetchingData(false);
    }
  }, [id, isEditing]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleDateChange = (date) => {
    setFormData({
      ...formData,
      date_of_birth: date,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // Data validation
    if (!formData.external_id) {
      setError('External ID is required');
      setLoading(false);
      return;
    }

    try {
      const cleanedData = cleanFormData(formData);
      
      if (isEditing) {
        await patientAPI.update(id, cleanedData);
        toast.success('Patient updated successfully');
      } else {
        // Generate actual ID only when saving
        const actualId = await generateActualId();
        const dataWithId = {
          ...cleanedData,
          patient_number: actualId
        };
        await patientAPI.create(dataWithId);
        toast.success(`Patient created successfully with ID ${actualId}`);
      }
      
      navigate('/patients');
    } catch (err) {
      console.error('Error saving patient', err);
      setError('Failed to save patient: ' + (err.response?.data?.msg || err.message));
      setLoading(false);
    }
  };

  if (fetchingData) {
    return (
      <Box display="flex" justifyContent="center" my={4}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box className="patient-form page-container">
      <Box display="flex" alignItems="center" mb={3}>
        <IconButton
          component={Link}
          to="/patients"
          sx={{ mr: 1 }}
        >
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h4" component="h1">
          {isEditing ? 'Edit Patient' : 'New Patient'}
        </Typography>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <Paper sx={{ p: 3 }}>
        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            {!isEditing && (
              <Grid item xs={12} md={6}>
                <AutoGeneratedIdField
                  label="Patient ID (Preview)"
                  value={previewId}
                  nextId={nextId}
                  loading={idLoading}
                  error={idError}
                  onRefresh={refetchId}
                  isEditMode={isEditing}
                  helperText="Preview of the next available ID (final ID assigned on save)"
                />
              </Grid>
            )}
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="External ID *"
                name="external_id"
                value={formData.external_id}
                onChange={handleChange}
                required
                helperText="Enter a unique identifier for this patient"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="First Name"
                name="first_name"
                value={formData.first_name}
                onChange={handleChange}
                helperText="Enter the patient's first name"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Last Name"
                name="last_name"
                value={formData.last_name}
                onChange={handleChange}
                helperText="Enter the patient's last name"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Date of Birth"
                  value={formData.date_of_birth}
                  onChange={handleDateChange}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      helperText: 'Enter the patient\'s date of birth'
                    }
                  }}
                />
              </LocalizationProvider>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Diagnosis"
                name="diagnosis"
                value={formData.diagnosis}
                onChange={handleChange}
                helperText="Enter the patient's diagnosis"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Physician First Name"
                name="physician_first_name"
                value={formData.physician_first_name}
                onChange={handleChange}
                helperText="Enter the physician's first name"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Physician Last Name"
                name="physician_last_name"
                value={formData.physician_last_name}
                onChange={handleChange}
                helperText="Enter the physician's last name"
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Comments"
                name="comments"
                value={formData.comments}
                onChange={handleChange}
                multiline
                rows={4}
                helperText="Add any additional notes or comments about this patient"
              />
            </Grid>
            
            <Grid item xs={12}>
              <Box display="flex" justifyContent="flex-end" mt={2}>
                <Button
                  component={Link}
                  to="/patients"
                  variant="outlined"
                  sx={{ mr: 1 }}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  startIcon={<SaveIcon />}
                  disabled={loading}
                >
                  {loading ? 'Saving...' : isEditing ? 'Update Patient' : 'Create Patient'}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Paper>
    </Box>
  );
};

export default PatientForm;