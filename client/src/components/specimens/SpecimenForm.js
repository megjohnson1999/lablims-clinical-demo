import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Grid,
  TextField,
  MenuItem,
  FormControlLabel,
  Switch,
  CircularProgress,
  Alert,
  IconButton,
  Autocomplete,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Select,
  FormControl,
  InputLabel,
  Divider,
} from '@mui/material';
import {
  Save as SaveIcon,
  ArrowBack as ArrowBackIcon,
  ExpandMore as ExpandMoreIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
  Storage as MetadataIcon,
} from '@mui/icons-material';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { specimenAPI, projectAPI, patientAPI } from '../../services/api';
import { cleanFormData } from '../../utils/helpers';
import { toast } from 'react-toastify';
import { formatDate } from '../../utils/helpers';
import SystemOptionSelect from '../common/SystemOptionSelect';
import SystemOptionAutocomplete from '../common/SystemOptionAutocomplete';
import useAutoGeneratedId from '../../hooks/useAutoGeneratedId';
import AutoGeneratedIdField from '../common/AutoGeneratedIdField';
import ProjectSelector from '../common/ProjectSelector';

const SpecimenForm = () => {
  const { id } = useParams();
  const isEditing = Boolean(id);
  const [formData, setFormData] = useState({
    project_id: '',
    patient_id: '',
    tube_id: '',
    extracted: false,
    initial_quantity: '',
    position_freezer: '',
    position_rack: '',
    position_box: '',
    position_dimension_one: '',
    position_dimension_two: '',
    activity_status: '',
    date_collected: '',
    collection_category: '',
    extraction_method: '',
    nucleated_cells: '',
    cell_numbers: '',
    percentage_segs: '',
    csf_protein: '',
    csf_gluc: '',
    used_up: false,
    specimen_site: '',
    run_number: '',
    comments: '',
    metadata: {},
  });
  const [loading, setLoading] = useState(false);
  const [fetchingData, setFetchingData] = useState(isEditing);
  const [error, setError] = useState('');
  const [selectedProject, setSelectedProject] = useState(null);
  const [patients, setPatients] = useState([]);
  const [searchingPatient, setSearchingPatient] = useState(false);
  const [patientSearchTerm, setPatientSearchTerm] = useState('');
  const [metadataExpanded, setMetadataExpanded] = useState(false);
  const [metadataSuggestions, setMetadataSuggestions] = useState([]);
  const [newMetadataKey, setNewMetadataKey] = useState('');
  const [newMetadataValue, setNewMetadataValue] = useState('');
  const [newMetadataType, setNewMetadataType] = useState('text');
  const navigate = useNavigate();
  
  // Hook for auto-generated ID
  const { 
    id: previewId, 
    nextId, 
    loading: idLoading, 
    error: idError, 
    refetch: refetchId,
    generateActualId
  } = useAutoGeneratedId('specimen', isEditing);

  useEffect(() => {
    if (isEditing) {
      const fetchSpecimen = async () => {
        try {
          const response = await specimenAPI.getById(id);
          const specimenData = response.data;
          
          // Format date for the form
          if (specimenData.date_collected) {
            specimenData.date_collected = specimenData.date_collected.substring(0, 10);
          }
          
          setFormData({
            ...formData,
            ...specimenData,
          });
          
          // If there's a patient, fetch patient details
          if (specimenData.patient_id) {
            try {
              const patientResponse = await patientAPI.getById(specimenData.patient_id);
              setPatients([patientResponse.data]);
            } catch (err) {
              console.error('Error fetching patient', err);
            }
          }
        } catch (err) {
          console.error('Error fetching specimen', err);
          setError('Failed to load specimen details');
        } finally {
          setFetchingData(false);
        }
      };

      fetchSpecimen();
    } else {
      setFetchingData(false);
    }
  }, [id, isEditing]);

  // Metadata suggestions removed - not needed for basic specimen entry
  // Advanced users can still manually add metadata fields using the accordion at bottom of form

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value,
    });
  };

  // Metadata management functions
  const handleAddMetadataField = () => {
    if (!newMetadataKey.trim() || !newMetadataValue.trim()) {
      toast.error('Both key and value are required for metadata fields');
      return;
    }

    if (formData.metadata[newMetadataKey]) {
      toast.error('Metadata key already exists. Use a different key or update the existing value.');
      return;
    }

    let processedValue = newMetadataValue.trim();
    
    // Process value based on type
    switch (newMetadataType) {
      case 'number':
        processedValue = parseFloat(processedValue);
        if (isNaN(processedValue)) {
          toast.error('Invalid number value');
          return;
        }
        break;
      case 'boolean':
        processedValue = processedValue.toLowerCase() === 'true';
        break;
      case 'date':
        // Validate date format
        const dateValue = new Date(processedValue);
        if (isNaN(dateValue.getTime())) {
          toast.error('Invalid date format. Use YYYY-MM-DD format.');
          return;
        }
        processedValue = processedValue; // Keep as string for JSON storage
        break;
      default:
        // Keep as string
        break;
    }

    setFormData({
      ...formData,
      metadata: {
        ...formData.metadata,
        [newMetadataKey.trim()]: processedValue
      }
    });

    // Clear input fields
    setNewMetadataKey('');
    setNewMetadataValue('');
    setNewMetadataType('text');

    toast.success('Metadata field added successfully');
  };

  const handleRemoveMetadataField = (key) => {
    const { [key]: removed, ...remainingMetadata } = formData.metadata;
    setFormData({
      ...formData,
      metadata: remainingMetadata
    });
    toast.success('Metadata field removed');
  };

  const handleUpdateMetadataField = (key, value) => {
    setFormData({
      ...formData,
      metadata: {
        ...formData.metadata,
        [key]: value
      }
    });
  };

  const fetchMetadataSuggestions = async (projectId) => {
    if (!projectId) return;
    
    try {
      const response = await specimenAPI.getMetadataSuggestions(projectId);
      setMetadataSuggestions(response.data || []);
    } catch (err) {
      console.error('Error fetching metadata suggestions:', err);
    }
  };

  const handleMetadataSuggestionClick = (suggestion) => {
    setNewMetadataKey(suggestion.field_name);
    if (suggestion.common_values && suggestion.common_values.length > 0) {
      setNewMetadataValue(suggestion.common_values[0]);
    }
    setNewMetadataType(suggestion.suggested_type || 'text');
  };

  const handlePatientSearch = async (term) => {
    if (!term || term.length < 2) {
      setPatients([]);
      return;
    }
    
    setPatientSearchTerm(term);
    setSearchingPatient(true);
    
    try {
      const response = await patientAPI.search(term);
      setPatients(response.data);
    } catch (err) {
      console.error('Error searching patients', err);
    } finally {
      setSearchingPatient(false);
    }
  };

  const handlePatientChange = (event, newValue) => {
    setFormData({
      ...formData,
      patient_id: newValue ? newValue.id : '',
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const cleanedData = cleanFormData(formData);
      
      if (isEditing) {
        await specimenAPI.update(id, cleanedData);
        toast.success('Specimen updated successfully');
      } else {
        // Generate actual ID only when saving
        const actualId = await generateActualId();
        const dataWithId = {
          ...cleanedData,
          specimen_number: actualId
        };
        await specimenAPI.create(dataWithId);
        toast.success(`Specimen created successfully with ID ${actualId}`);
      }
      
      navigate('/specimens');
    } catch (err) {
      console.error('Error saving specimen', err);
      setError('Failed to save specimen: ' + (err.response?.data?.msg || err.message));
      setLoading(false);
    }
  };

  if (fetchingData) {
    return (
      <Box display="flex" justifyContent="center" my={4}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box className="specimen-form page-container">
      <Box display="flex" alignItems="center" mb={3}>
        <IconButton
          component={Link}
          to="/specimens"
          sx={{ mr: 1 }}
        >
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h4" component="h1">
          {isEditing ? 'Edit Specimen' : 'New Specimen'}
        </Typography>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <Paper sx={{ p: 3 }}>
        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>
                Basic Information
              </Typography>
            </Grid>
            
            {!isEditing && (
              <Grid item xs={12} md={6}>
                <AutoGeneratedIdField
                  label="Specimen ID (Preview)"
                  value={previewId}
                  nextId={nextId}
                  loading={idLoading}
                  error={idError}
                  onRefresh={refetchId}
                  isEditMode={isEditing}
                  helperText="Preview of the next available ID (final ID assigned on save)"
                />
              </Grid>
            )}
            
            <Grid item xs={12} md={6}>
              <ProjectSelector
                selectedProject={selectedProject}
                onProjectChange={(project) => {
                  setSelectedProject(project);
                  setFormData({
                    ...formData,
                    project_id: project ? project.id : ''
                  });
                }}
                label="Project *"
                helperText="Select the project this specimen belongs to"
                required={true}
                simplified={true}
                showCreateButton={false}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Autocomplete
                options={patients}
                loading={searchingPatient}
                getOptionLabel={(option) => 
                  `${option.external_id || ''} ${option.first_name || ''} ${option.last_name || ''}`.trim()
                }
                value={patients.find(p => p.id === formData.patient_id) || null}
                onChange={handlePatientChange}
                onInputChange={(event, newInputValue) => {
                  handlePatientSearch(newInputValue);
                }}
                renderInput={(params) => (
                  <TextField
                    {...params}
                    label="Patient"
                    fullWidth
                    helperText="Search patients by name or ID"
                    InputProps={{
                      ...params.InputProps,
                      endAdornment: (
                        <>
                          {searchingPatient ? <CircularProgress color="inherit" size={20} /> : null}
                          {params.InputProps.endAdornment}
                        </>
                      ),
                    }}
                  />
                )}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Tube ID"
                name="tube_id"
                value={formData.tube_id}
                onChange={handleChange}
                helperText="Unique identifier for this specimen"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Date Collected"
                name="date_collected"
                type="date"
                value={formData.date_collected}
                onChange={handleChange}
                InputLabelProps={{ shrink: true }}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Initial Quantity"
                name="initial_quantity"
                type="number"
                value={formData.initial_quantity}
                onChange={handleChange}
                InputProps={{ inputProps: { step: 0.01 } }}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <SystemOptionAutocomplete
                category="specimen_site"
                name="specimen_site"
                label="Specimen Site"
                value={formData.specimen_site}
                onChange={handleChange}
                helperText="Select from list or type a custom value"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <SystemOptionAutocomplete
                category="activity_status"
                name="activity_status"
                label="Activity Status"
                value={formData.activity_status}
                onChange={handleChange}
                helperText="Select from list or type a custom value"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Collection Category"
                name="collection_category"
                value={formData.collection_category}
                onChange={handleChange}
                helperText="Optional: Describe the type of collection (e.g., Clinical, Research)"
              />
            </Grid>
            
            <Grid item xs={6} md={3}>
              <FormControlLabel
                control={
                  <Switch
                    name="extracted"
                    checked={formData.extracted}
                    onChange={handleChange}
                    color="primary"
                  />
                }
                label="Extracted"
              />
            </Grid>
            
            <Grid item xs={6} md={3}>
              <FormControlLabel
                control={
                  <Switch
                    name="used_up"
                    checked={formData.used_up}
                    onChange={handleChange}
                    color="primary"
                  />
                }
                label="Used Up"
              />
            </Grid>
            
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                Location Information
              </Typography>
            </Grid>
            
            <Grid item xs={12} md={3}>
              <TextField
                fullWidth
                label="Freezer"
                name="position_freezer"
                value={formData.position_freezer}
                onChange={handleChange}
              />
            </Grid>
            
            <Grid item xs={12} md={3}>
              <TextField
                fullWidth
                label="Rack"
                name="position_rack"
                value={formData.position_rack}
                onChange={handleChange}
              />
            </Grid>
            
            <Grid item xs={12} md={3}>
              <TextField
                fullWidth
                label="Box"
                name="position_box"
                value={formData.position_box}
                onChange={handleChange}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Row (within box)"
                name="position_dimension_one"
                value={formData.position_dimension_one}
                onChange={handleChange}
                inputProps={{ maxLength: 1 }}
                helperText="e.g., A, B, C"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Column (within box)"
                name="position_dimension_two"
                value={formData.position_dimension_two}
                onChange={handleChange}
                inputProps={{ maxLength: 2 }}
                helperText="e.g., 1, 2, 12"
              />
            </Grid>
            
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                Technical Details
              </Typography>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Extraction Method"
                name="extraction_method"
                value={formData.extraction_method}
                onChange={handleChange}
                helperText="Optional: Describe the extraction method used"
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Run Number"
                name="run_number"
                value={formData.run_number}
                onChange={handleChange}
              />
            </Grid>
            
            <Grid item xs={12} md={3}>
              <TextField
                fullWidth
                label="Nucleated Cells"
                name="nucleated_cells"
                value={formData.nucleated_cells}
                onChange={handleChange}
              />
            </Grid>
            
            <Grid item xs={12} md={3}>
              <TextField
                fullWidth
                label="Cell Numbers"
                name="cell_numbers"
                type="number"
                value={formData.cell_numbers}
                onChange={handleChange}
              />
            </Grid>
            
            <Grid item xs={12} md={2}>
              <TextField
                fullWidth
                label="% Segs"
                name="percentage_segs"
                type="number"
                value={formData.percentage_segs}
                onChange={handleChange}
                InputProps={{ inputProps: { min: 0, max: 100, step: 0.1 } }}
              />
            </Grid>
            
            <Grid item xs={12} md={2}>
              <TextField
                fullWidth
                label="CSF Protein"
                name="csf_protein"
                type="number"
                value={formData.csf_protein}
                onChange={handleChange}
                InputProps={{ inputProps: { step: 0.01 } }}
              />
            </Grid>
            
            <Grid item xs={12} md={2}>
              <TextField
                fullWidth
                label="CSF Glucose"
                name="csf_gluc"
                type="number"
                value={formData.csf_gluc}
                onChange={handleChange}
                InputProps={{ inputProps: { step: 0.01 } }}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Comments"
                name="comments"
                value={formData.comments}
                onChange={handleChange}
                multiline
                rows={4}
              />
            </Grid>


            {/* Metadata Section */}
            <Grid item xs={12}>
              <Accordion 
                expanded={metadataExpanded} 
                onChange={(event, isExpanded) => setMetadataExpanded(isExpanded)}
                sx={{ mt: 2 }}
              >
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <MetadataIcon color="primary" />
                    <Typography variant="h6" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                      Metadata ({Object.keys(formData.metadata || {}).length} fields)
                    </Typography>
                  </Box>
                </AccordionSummary>
                <AccordionDetails>
                  <Box sx={{ mt: 1 }}>
                    <Typography variant="body2" color="text.secondary" gutterBottom>
                      Add custom metadata fields to store project-specific information about this specimen.
                    </Typography>

                    {/* Metadata Suggestions */}
                    {formData.project_id && metadataSuggestions.length > 0 && (
                      <Box sx={{ mb: 3 }}>
                        <Typography variant="body2" sx={{ mb: 1, fontWeight: 500 }}>
                          Suggested fields based on project history:
                        </Typography>
                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                          {metadataSuggestions.slice(0, 6).map((suggestion) => (
                            <Chip
                              key={suggestion.field_name}
                              label={`${suggestion.field_name} (${suggestion.suggested_type})`}
                              size="small"
                              variant="outlined"
                              onClick={() => handleMetadataSuggestionClick(suggestion)}
                              sx={{ cursor: 'pointer' }}
                            />
                          ))}
                        </Box>
                      </Box>
                    )}

                    {/* Add New Metadata Field */}
                    <Box sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1, mb: 2 }}>
                      <Typography variant="body2" sx={{ mb: 2, fontWeight: 500 }}>
                        Add New Field:
                      </Typography>
                      <Grid container spacing={2} alignItems="end">
                        <Grid item xs={12} sm={4}>
                          <TextField
                            fullWidth
                            size="small"
                            label="Field Name"
                            value={newMetadataKey}
                            onChange={(e) => setNewMetadataKey(e.target.value)}
                            placeholder="e.g., patient_age"
                          />
                        </Grid>
                        <Grid item xs={12} sm={4}>
                          <TextField
                            fullWidth
                            size="small"
                            label="Value"
                            value={newMetadataValue}
                            onChange={(e) => setNewMetadataValue(e.target.value)}
                            placeholder="Enter value"
                          />
                        </Grid>
                        <Grid item xs={12} sm={2}>
                          <FormControl fullWidth size="small">
                            <InputLabel>Type</InputLabel>
                            <Select
                              value={newMetadataType}
                              onChange={(e) => setNewMetadataType(e.target.value)}
                              label="Type"
                            >
                              <MenuItem value="text">Text</MenuItem>
                              <MenuItem value="number">Number</MenuItem>
                              <MenuItem value="boolean">Boolean</MenuItem>
                              <MenuItem value="date">Date</MenuItem>
                            </Select>
                          </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={2}>
                          <Button
                            fullWidth
                            variant="contained"
                            size="small"
                            startIcon={<AddIcon />}
                            onClick={handleAddMetadataField}
                            disabled={!newMetadataKey.trim() || !newMetadataValue.trim()}
                          >
                            Add
                          </Button>
                        </Grid>
                      </Grid>
                    </Box>

                    {/* Existing Metadata Fields */}
                    {Object.keys(formData.metadata || {}).length > 0 && (
                      <>
                        <Divider sx={{ my: 2 }} />
                        <Typography variant="body2" sx={{ mb: 2, fontWeight: 500 }}>
                          Current Fields:
                        </Typography>
                        <Grid container spacing={2}>
                          {Object.entries(formData.metadata || {}).map(([key, value]) => (
                            <Grid item xs={12} sm={6} key={key}>
                              <Box sx={{ 
                                p: 2, 
                                border: '1px solid', 
                                borderColor: 'grey.300', 
                                borderRadius: 1,
                                bgcolor: 'background.paper'
                              }}>
                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                  <Typography variant="body2" sx={{ fontWeight: 500, color: 'primary.main' }}>
                                    {key}
                                  </Typography>
                                  <IconButton
                                    size="small"
                                    color="error"
                                    onClick={() => handleRemoveMetadataField(key)}
                                  >
                                    <DeleteIcon fontSize="small" />
                                  </IconButton>
                                </Box>
                                <TextField
                                  size="small"
                                  fullWidth
                                  value={value}
                                  onChange={(e) => handleUpdateMetadataField(key, e.target.value)}
                                  variant="outlined"
                                />
                                <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5, display: 'block' }}>
                                  Type: {typeof value}
                                </Typography>
                              </Box>
                            </Grid>
                          ))}
                        </Grid>
                      </>
                    )}

                    {Object.keys(formData.metadata || {}).length === 0 && (
                      <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                        No metadata fields added yet. Use the form above to add custom fields.
                      </Typography>
                    )}
                  </Box>
                </AccordionDetails>
              </Accordion>
            </Grid>
            
            <Grid item xs={12}>
              <Box display="flex" justifyContent="flex-end" mt={2}>
                <Button
                  component={Link}
                  to="/specimens"
                  variant="outlined"
                  sx={{ mr: 1 }}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  startIcon={<SaveIcon />}
                  disabled={loading}
                >
                  {loading ? 'Saving...' : isEditing ? 'Update Specimen' : 'Create Specimen'}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Paper>
    </Box>
  );
};

export default SpecimenForm;