import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import {
  Box,
  Typography,
  Paper,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Grid,
  Alert,
  CircularProgress,
  Chip,
  InputAdornment,
  Card,
  CardContent,
  Divider,
} from '@mui/material';
import {
  Save as SaveIcon,
  Cancel as CancelIcon,
  QrCode as BarcodeIcon,
  Science as ScienceIcon,
  LocalOffer as PriceIcon,
} from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { inventoryAPI } from '../../services/api';
import useAutoGeneratedId from '../../hooks/useAutoGeneratedId';
import { toast } from 'react-toastify';
import { useAuth } from '../../context/AuthContext';
import InventoryBarcodeSearch from '../common/InventoryBarcodeSearch';
import { parseCommercialBarcode, generateLabBarcode } from '../../utils/barcode';

const STORAGE_CONDITIONS = [
  '-80°C',
  '-20°C',
  '4°C',
  'RT (Room Temperature)',
  'Dark/RT',
  'Freezer',
  'Refrigerator',
];

const UNIT_OPTIONS = [
  'μL', 'mL', 'L',
  'μg', 'mg', 'g', 'kg',
  'pieces', 'units', 'vials',
  'plates', 'tubes', 'boxes',
  'reactions', 'tests'
];

const InventoryForm = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const isEditMode = Boolean(id);
  
  const [formData, setFormData] = useState({
    name: '',
    category: '',
    description: '',
    supplier: '',
    catalog_number: '',
    current_quantity: 0,
    unit_of_measure: '',
    lot_number: '',
    expiration_date: null,
    storage_location: '',
    storage_conditions: '',
    minimum_stock_level: 0,
    cost_per_unit: '',
    notes: '',
    barcode: '', // Add barcode field
  });
  
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [existingItem, setExistingItem] = useState(null);
  const [commercialBarcodeData, setCommercialBarcodeData] = useState(null);
  const [showBarcodeScanner, setShowBarcodeScanner] = useState(false);
  
  const { currentUser } = useAuth();
  const isEditor = currentUser?.role === 'editor' || currentUser?.role === 'admin';
  
  // Auto-generated ID hook
  const { 
    id: previewId, 
    loading: idLoading, 
    error: idError,
    generateActualId 
  } = useAutoGeneratedId('inventory', isEditMode);

  useEffect(() => {
    if (!isEditor) {
      navigate('/inventory');
      return;
    }

    fetchCategories();
    
    if (isEditMode) {
      fetchInventoryItem();
    }
  }, [id, isEditMode, isEditor]);

  const fetchCategories = async () => {
    try {
      const response = await inventoryAPI.getCategories();
      setCategories(response.data);
    } catch (err) {
      console.error('Error fetching categories:', err);
    }
  };

  const fetchInventoryItem = async () => {
    try {
      setLoading(true);
      const response = await inventoryAPI.getById(id);
      const item = response.data;
      
      setExistingItem(item);
      setFormData({
        name: item.name || '',
        category: item.category || '',
        description: item.description || '',
        supplier: item.supplier || '',
        catalog_number: item.catalog_number || '',
        current_quantity: item.current_quantity || 0,
        unit_of_measure: item.unit_of_measure || '',
        lot_number: item.lot_number || '',
        expiration_date: item.expiration_date ? new Date(item.expiration_date) : null,
        storage_location: item.storage_location || '',
        storage_conditions: item.storage_conditions || '',
        minimum_stock_level: item.minimum_stock_level || 0,
        cost_per_unit: item.cost_per_unit || '',
        notes: item.notes || '',
        barcode: item.barcode || '',
      });
    } catch (err) {
      console.error('Error fetching inventory item:', err);
      setError('Failed to load inventory item');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Auto-set unit based on category
    if (name === 'category' && value && !formData.unit_of_measure) {
      const categoryData = categories.find(cat => cat.category_name === value);
      if (categoryData?.default_unit) {
        setFormData(prev => ({
          ...prev,
          unit_of_measure: categoryData.default_unit
        }));
      }
    }
  };

  const handleDateChange = (date) => {
    setFormData(prev => ({
      ...prev,
      expiration_date: date
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.name.trim() || !formData.category) {
      setError('Name and category are required');
      return;
    }

    try {
      setLoading(true);
      setError('');

      const submitData = {
        ...formData,
        expiration_date: formData.expiration_date ? 
          formData.expiration_date.toISOString().split('T')[0] : null,
        current_quantity: parseFloat(formData.current_quantity) || 0,
        minimum_stock_level: parseFloat(formData.minimum_stock_level) || 0,
        cost_per_unit: formData.cost_per_unit ? parseFloat(formData.cost_per_unit) : null,
        barcode: formData.barcode || '', // Include barcode in submission
      };

      let response;
      if (isEditMode) {
        response = await inventoryAPI.update(id, submitData);
        toast.success('Inventory item updated successfully');
      } else {
        // Get actual ID when creating
        const actualId = await generateActualId();
        response = await inventoryAPI.create(submitData);
        toast.success('Inventory item created successfully');
      }

      navigate('/inventory');
    } catch (err) {
      console.error('Error saving inventory item:', err);
      setError(err.response?.data?.msg || 'Failed to save inventory item');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    navigate('/inventory');
  };

  const handleCommercialBarcodeScanned = (barcodeData) => {
    if (barcodeData.isValid && barcodeData.isCommercial) {
      setCommercialBarcodeData(barcodeData);
      
      // Auto-populate form fields from barcode data
      setFormData(prev => ({
        ...prev,
        barcode: barcodeData.barcode,
        name: barcodeData.productInfo.name || prev.name,
        supplier: barcodeData.productInfo.manufacturer || prev.supplier,
        catalog_number: barcodeData.productInfo.catalogNumber || prev.catalog_number,
        description: barcodeData.productInfo.description || prev.description,
      }));
      
      toast.success(`Commercial barcode scanned! ${barcodeData.productInfo.name ? 'Product info populated.' : 'Manual entry required.'}`);
      setShowBarcodeScanner(false);
    } else {
      toast.error('Invalid or unsupported barcode format');
    }
  };

  const handleExistingItemFound = (item) => {
    toast.info(`Found existing item: ${item.name}`);
  };

  const clearBarcodeData = () => {
    setCommercialBarcodeData(null);
    setFormData(prev => ({
      ...prev,
      barcode: ''
    }));
  };

  const generateBarcodePreview = () => {
    if (isEditMode && existingItem) {
      // Use commercial barcode if available, otherwise generate lab barcode
      return existingItem.barcode || generateLabBarcode(existingItem);
    } else if (previewId) {
      // For new items, check if we have a commercial barcode from scanner
      return formData.barcode || generateLabBarcode({ inventory_id: previewId });
    }
    return '---';
  };

  if (loading && isEditMode) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Box className="inventory-form page-container">
        <Typography variant="h4" component="h1" gutterBottom>
          {isEditMode ? 'Edit Inventory Item' : 'New Inventory Item'}
        </Typography>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        {idError && (
          <Alert severity="warning" sx={{ mb: 3 }}>
            {idError}
          </Alert>
        )}

        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            {/* ID and Barcode Preview */}
            <Grid item xs={12}>
              <Card>
                <CardContent>
                  <Box display="flex" alignItems="center" gap={2} mb={2}>
                    <ScienceIcon color="primary" />
                    <Typography variant="h6">
                      Item Identification
                    </Typography>
                  </Box>
                  
                  <Grid container spacing={2} alignItems="center">
                    <Grid item xs={12} sm={6}>
                      <Box display="flex" alignItems="center" gap={1}>
                        <Typography variant="body2" color="text.secondary">
                          Inventory ID:
                        </Typography>
                        <Chip 
                          label={generateBarcodePreview()}
                          color="primary"
                          size="small"
                          disabled={idLoading}
                        />
                        {idLoading && <CircularProgress size={16} />}
                      </Box>
                    </Grid>
                    <Grid item xs={12} sm={6}>
                      <Box display="flex" alignItems="center" gap={1}>
                        <BarcodeIcon color="action" />
                        <Typography variant="body2" color="text.secondary">
                          {formData.barcode ? 'Commercial barcode detected' : 'Lab barcode will be generated if needed'}
                        </Typography>
                      </Box>
                    </Grid>
                  </Grid>
                </CardContent>
              </Card>
            </Grid>

            {/* Barcode Scanning Section */}
            {!isEditMode && (
              <Grid item xs={12}>
                <Paper sx={{ p: 3 }}>
                  <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h6">
                      Product Barcode Scanner
                    </Typography>
                    <Button
                      variant={showBarcodeScanner ? "contained" : "outlined"}
                      startIcon={<BarcodeIcon />}
                      onClick={() => setShowBarcodeScanner(!showBarcodeScanner)}
                    >
                      {showBarcodeScanner ? 'Hide Scanner' : 'Scan Product Barcode'}
                    </Button>
                  </Box>
                  
                  {showBarcodeScanner && (
                    <Box sx={{ mb: 2 }}>
                      <InventoryBarcodeSearch
                        placeholder="Scan commercial product barcode to auto-populate fields..."
                        onCommercialBarcodeScanned={handleCommercialBarcodeScanned}
                        onItemFound={handleExistingItemFound}
                        allowCommercialLookup={true}
                        showResults={false}
                      />
                    </Box>
                  )}

                  {commercialBarcodeData && (
                    <Alert severity="success" sx={{ mb: 2 }}>
                      <Box display="flex" justifyContent="space-between" alignItems="center">
                        <Box>
                          <Typography variant="body2">
                            <strong>Commercial barcode detected:</strong> {commercialBarcodeData.barcode} ({commercialBarcodeData.format})
                          </Typography>
                          {commercialBarcodeData.productInfo.name && (
                            <Typography variant="caption" display="block">
                              Product: {commercialBarcodeData.productInfo.name}
                            </Typography>
                          )}
                        </Box>
                        <Button size="small" onClick={clearBarcodeData}>
                          Clear
                        </Button>
                      </Box>
                    </Alert>
                  )}
                  
                  <Typography variant="body2" color="text.secondary">
                    Scan commercial product barcodes (UPC/EAN) to automatically populate product information.
                    Items without commercial barcodes will get lab-generated codes for tracking.
                  </Typography>
                </Paper>
              </Grid>
            )}

            {/* Basic Information */}
            <Grid item xs={12}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom>
                  Basic Information
                </Typography>
                
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={8}>
                    <TextField
                      fullWidth
                      name="name"
                      label="Item Name"
                      value={formData.name}
                      onChange={handleChange}
                      required
                      helperText="Enter a descriptive name for the inventory item"
                    />
                  </Grid>
                  
                  <Grid item xs={12} sm={4}>
                    <FormControl fullWidth required>
                      <InputLabel>Category</InputLabel>
                      <Select
                        name="category"
                        value={formData.category}
                        onChange={handleChange}
                        label="Category"
                      >
                        {categories.map(cat => (
                          <MenuItem key={cat.category_name} value={cat.category_name}>
                            {cat.category_name.charAt(0).toUpperCase() + cat.category_name.slice(1)}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      name="description"
                      label="Description"
                      value={formData.description}
                      onChange={handleChange}
                      multiline
                      rows={2}
                      helperText="Optional detailed description"
                    />
                  </Grid>
                </Grid>
              </Paper>
            </Grid>

            {/* Supplier Information */}
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom>
                  Supplier Information
                </Typography>
                
                <Grid container spacing={2}>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      name="supplier"
                      label="Supplier"
                      value={formData.supplier}
                      onChange={handleChange}
                      helperText="Company or vendor name"
                    />
                  </Grid>
                  
                  <Grid item xs={12} sm={8}>
                    <TextField
                      fullWidth
                      name="catalog_number"
                      label="Catalog Number"
                      value={formData.catalog_number}
                      onChange={handleChange}
                      helperText="Supplier's catalog/part number"
                    />
                  </Grid>
                  
                  <Grid item xs={12} sm={4}>
                    <TextField
                      fullWidth
                      name="lot_number"
                      label="Lot Number"
                      value={formData.lot_number}
                      onChange={handleChange}
                    />
                  </Grid>
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      name="cost_per_unit"
                      label="Cost per Unit"
                      type="number"
                      value={formData.cost_per_unit}
                      onChange={handleChange}
                      InputProps={{
                        startAdornment: <InputAdornment position="start"><PriceIcon /></InputAdornment>,
                      }}
                      helperText="Cost per unit in USD (optional)"
                    />
                  </Grid>
                </Grid>
              </Paper>
            </Grid>

            {/* Quantity and Storage */}
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom>
                  Quantity & Storage
                </Typography>
                
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      fullWidth
                      name="current_quantity"
                      label="Current Quantity"
                      type="number"
                      value={formData.current_quantity}
                      onChange={handleChange}
                      required
                      inputProps={{ min: 0, step: 0.01 }}
                    />
                  </Grid>
                  
                  <Grid item xs={12} sm={6}>
                    <FormControl fullWidth>
                      <InputLabel>Unit of Measure</InputLabel>
                      <Select
                        name="unit_of_measure"
                        value={formData.unit_of_measure}
                        onChange={handleChange}
                        label="Unit of Measure"
                      >
                        {UNIT_OPTIONS.map(unit => (
                          <MenuItem key={unit} value={unit}>
                            {unit}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  
                  <Grid item xs={12} sm={6}>
                    <TextField
                      fullWidth
                      name="minimum_stock_level"
                      label="Minimum Stock Level"
                      type="number"
                      value={formData.minimum_stock_level}
                      onChange={handleChange}
                      inputProps={{ min: 0, step: 0.01 }}
                      helperText="Alert threshold for low stock"
                    />
                  </Grid>
                  
                  <Grid item xs={12} sm={6}>
                    <DatePicker
                      label="Expiration Date"
                      value={formData.expiration_date}
                      onChange={handleDateChange}
                      renderInput={(params) => <TextField {...params} fullWidth />}
                    />
                  </Grid>
                  
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      name="storage_location"
                      label="Storage Location"
                      value={formData.storage_location}
                      onChange={handleChange}
                      helperText="Physical location (e.g., Freezer A, Shelf 2)"
                    />
                  </Grid>
                  
                  <Grid item xs={12}>
                    <FormControl fullWidth>
                      <InputLabel>Storage Conditions</InputLabel>
                      <Select
                        name="storage_conditions"
                        value={formData.storage_conditions}
                        onChange={handleChange}
                        label="Storage Conditions"
                      >
                        {STORAGE_CONDITIONS.map(condition => (
                          <MenuItem key={condition} value={condition}>
                            {condition}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                </Grid>
              </Paper>
            </Grid>

            {/* Notes */}
            <Grid item xs={12}>
              <Paper sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom>
                  Additional Notes
                </Typography>
                
                <TextField
                  fullWidth
                  name="notes"
                  label="Notes"
                  value={formData.notes}
                  onChange={handleChange}
                  multiline
                  rows={3}
                  helperText="Any additional information about this item"
                />
              </Paper>
            </Grid>

            {/* Action Buttons */}
            <Grid item xs={12}>
              <Box display="flex" gap={2} justifyContent="flex-end">
                <Button
                  variant="outlined"
                  onClick={handleCancel}
                  startIcon={<CancelIcon />}
                  disabled={loading}
                >
                  Cancel
                </Button>
                
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  startIcon={loading ? <CircularProgress size={20} /> : <SaveIcon />}
                  disabled={loading || idLoading}
                >
                  {loading ? 'Saving...' : isEditMode ? 'Update Item' : 'Create Item'}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Box>
    </LocalizationProvider>
  );
};

export default InventoryForm;