/**
 * Unified Column Mapping System
 * Handles consistent column mapping for both migration and project imports
 */

/**
 * Normalize collaborator data with consistent column mapping
 * @param {Object} rawData - Raw CSV data
 * @param {string} importType - 'migration' or 'project'
 * @returns {Object} Normalized collaborator data
 */
function normalizeCollaborator(rawData, importType = 'project') {
  // Extract ID field for migration imports
  const csvId = rawData.ID || rawData.id || rawData.collaborator_id;
  
  // Extract PI name with multiple possible names
  const piName = rawData.PI_Name || rawData.pi_name || rawData['PI Name'] || 
                rawData.PI_name || rawData.PiName || rawData.pi_Name || null;
  
  // Extract PI institute with multiple possible names
  const piInstitute = rawData.PI_Institute || rawData.pi_institute || rawData['PI Institute'] || 
                     rawData.PI_institute || rawData.PiInstitute || rawData.pi_Institute || null;
  
  const normalized = {
    // UUID primary key - always auto-generated
    id: null, // Will be generated by database
    
    // Integer collaborator number - direct from CSV for migration, sequence for project
    collaborator_number: importType === 'migration' ? parseInt(csvId) : null,
    
    // Standard fields with consistent mapping
    irb_id: rawData.IRB_ID || rawData.irb_id || rawData['IRB ID'] || rawData.IRB_id || null,
    pi_name: piName || (piInstitute ? `PI at ${piInstitute}` : 'Unknown PI'),
    pi_institute: piInstitute || (piName ? 'Unknown Institution' : 'Unknown Institution'),
    pi_email: rawData.PI_Email || rawData.pi_email || rawData['PI Email'] || rawData.PI_email || null,
    pi_phone: rawData.PI_Phone || rawData.pi_phone || rawData['PI Phone'] || rawData.PI_phone || null,
    pi_fax: rawData.PI_Fax || rawData.pi_fax || rawData['PI Fax'] || rawData.PI_fax || null,
    internal_contact: rawData.Internal_Contact || rawData.internal_contact || rawData['Internal Contact'] || rawData.Internal_contact || null,
    comments: rawData.Comments || rawData.comments || rawData.notes || rawData.Notes || null
  };
  
  return normalized;
}

/**
 * Normalize project data with consistent column mapping
 * @param {Object} rawData - Raw CSV data
 * @param {string} importType - 'migration' or 'project'
 * @returns {Object} Normalized project data
 */
function normalizeProject(rawData, importType = 'project') {
  const csvId = rawData.ID || rawData.id || rawData.project_id;
  
  const normalized = {
    // UUID primary key - always auto-generated
    id: null, // Will be generated by database
    
    // Project number - direct from CSV for migration, sequence for project
    project_number: importType === 'migration' ? parseInt(csvId) : null,
    
    // Collaborator reference - direct number lookup, no legacy mapping
    collaborator_number_ref: rawData.Collaborator || rawData.collaborator || rawData.collaborator_id || null,
    
    // Standard fields with consistent mapping
    disease: rawData.Disease || rawData.disease || 'Unknown Disease',
    specimen_type: rawData.Specimen_Type || rawData.specimen_type || rawData['Specimen Type'] || 
                  rawData.SpecimenType || rawData.specimen_Type || null,
    source: rawData.Source || rawData.source || null,
    date_received: rawData.Date_Received || rawData.date_received || rawData['Date Received'] || 
                  rawData.DateReceived || rawData.date_Received || null,
    feedback_date: rawData.Feedback_Date || rawData.feedback_date || rawData['Feedback Date'] || 
                  rawData.FeedbackDate || rawData.feedback_Date || null,
    comments: rawData.Comments || rawData.comments || rawData.notes || rawData.Notes || null
  };
  
  return normalized;
}

/**
 * Normalize specimen data with consistent column mapping
 * @param {Object} rawData - Raw CSV data
 * @param {string} importType - 'migration' or 'project'
 * @returns {Object} Normalized specimen data
 */
function normalizeSpecimen(rawData, importType = 'project') {
  const normalized = {
    // UUID primary key - always auto-generated
    id: null, // Will be generated by database
    
    // Specimen number - always from sequence for both import types
    specimen_number: null, // Will be generated from sequence
    
    // Tube ID with multiple possible names
    tube_id: rawData.tube_id || rawData.Tube_ID || rawData.specimen_id || rawData.Specimen_ID || 
            rawData.sample_id || rawData.Sample_ID || rawData.ID || rawData.id || null,
    
    // Project reference - direct number lookup, no legacy mapping
    project_number_ref: rawData.project_id || rawData.Project_ID || rawData.Project || 
                       rawData.project || rawData.ProjectID || null,
    
    // Patient reference - direct number lookup (optional)
    patient_number_ref: rawData.patient_id || rawData.Patient_ID || rawData.Patient || 
                       rawData.patient || rawData.PatientID || null,
    
    // Standard fields with consistent mapping
    date_collected: rawData.date_collected || rawData.Date_Collected || rawData['Date Collected'] || 
                   rawData.collection_date || rawData.Collection_Date || rawData.DateCollected || null,
    activity_status: rawData.activity_status || rawData.Activity_Status || rawData.Status || 
                    rawData.status || rawData.ActivityStatus || 'Active',
    extracted: parseBoolean(rawData.extracted || rawData.Extracted || rawData.is_extracted || 
                          rawData.Is_Extracted || rawData.IsExtracted),
    used_up: parseBoolean(rawData.used_up || rawData.Used_Up || rawData['Used Up'] || 
                         rawData.UsedUp || rawData.used_Up),
    initial_quantity: cleanNumericValue(rawData.initial_quantity || rawData.Initial_Quantity || 
                                      rawData.Quantity || rawData.quantity || rawData.Volume || 
                                      rawData.volume || rawData.InitialQuantity),
    specimen_site: rawData.specimen_site || rawData.Specimen_Site || rawData.Site || rawData.site || 
                  rawData.specimen_type || rawData.Specimen_Type || rawData.SpecimenSite || null,
    
    // Position fields
    position_freezer: rawData.position_freezer || rawData.Position_Freezer || rawData.Freezer || 
                     rawData.freezer || rawData.Location || rawData.location || rawData.PositionFreezer || null,
    position_rack: rawData.position_rack || rawData.Position_Rack || rawData.Rack || 
                  rawData.rack || rawData.PositionRack || null,
    position_box: rawData.position_box || rawData.Position_Box || rawData.Box || 
                 rawData.box || rawData.PositionBox || null,
    position_dimension_one: rawData.position_dimension_one || rawData.Position_Dimension_One || 
                          rawData.Position_1 || rawData.position_1 || rawData.Pos1 || rawData.pos1 || null,
    position_dimension_two: rawData.position_dimension_two || rawData.Position_Dimension_Two || 
                          rawData.Position_2 || rawData.position_2 || rawData.Pos2 || rawData.pos2 || null,
    
    comments: rawData.comments || rawData.Comments || rawData.Notes || rawData.notes || 
             rawData.Description || rawData.description || null
  };
  
  return normalized;
}

/**
 * Normalize patient data with consistent column mapping
 * @param {Object} rawData - Raw CSV data
 * @param {string} importType - 'migration' or 'project'
 * @returns {Object} Normalized patient data
 */
function normalizePatient(rawData, importType = 'project') {
  const csvId = rawData.ID || rawData.id || rawData.patient_id || rawData.Patient_ID;
  
  const normalized = {
    // UUID primary key - always auto-generated
    id: null, // Will be generated by database
    
    // Patient number - always from sequence for both import types
    patient_number: null, // Will be generated from sequence
    
    // External ID (what users see) - use csvId for migration, other fields for project
    external_id: csvId || rawData.external_id || rawData.External_ID || null,
    
    // Standard fields with consistent mapping
    first_name: rawData.first_name || rawData.First_Name || rawData.firstname || 
               rawData.FirstName || rawData['First Name'] || rawData.firstName || null,
    last_name: rawData.last_name || rawData.Last_Name || rawData.lastname || 
              rawData.LastName || rawData['Last Name'] || rawData.lastName || null,
    date_of_birth: rawData.date_of_birth || rawData.Date_of_Birth || rawData.DOB || 
                  rawData.dob || rawData['Date of Birth'] || rawData.DateOfBirth || null,
    diagnosis: rawData.diagnosis || rawData.Diagnosis || rawData.disease || 
              rawData.Disease || rawData.condition || rawData.Condition || null,
    physician_first_name: rawData.physician_first_name || rawData.Physician_First_Name || 
                         rawData.doctor_first_name || rawData.Doctor_First_Name || 
                         rawData.PhysicianFirstName || null,
    physician_last_name: rawData.physician_last_name || rawData.Physician_Last_Name || 
                        rawData.doctor_last_name || rawData.Doctor_Last_Name || 
                        rawData.PhysicianLastName || null,
    comments: rawData.comments || rawData.Comments || rawData.notes || rawData.Notes || null
  };
  
  return normalized;
}

/**
 * Parse boolean values more flexibly
 */
function parseBoolean(value) {
  if (value === undefined || value === null || value === '') return false;
  const stringValue = String(value).toLowerCase().trim();
  
  const trueValues = ['yes', 'true', '1', 'y', 't', 'on', 'enabled', 'active'];
  const falseValues = ['no', 'false', '0', 'n', 'f', 'off', 'disabled', 'inactive'];
  
  if (trueValues.includes(stringValue)) return true;
  if (falseValues.includes(stringValue)) return false;
  
  return false; // Default to false for unrecognized values
}

/**
 * Clean and convert numeric values (remove units, handle invalid data)
 */
function cleanNumericValue(value) {
  if (!value || value === '' || value === 'NULL' || value === null) {
    return null;
  }
  
  // Convert to string and clean common units and formatting
  const cleaned = String(value)
    .replace(/[ul|μl|ml|ML|UL|units?|mg|g|kg]/gi, '') // Remove common units
    .replace(/[^\d.-]/g, '') // Remove non-numeric characters except decimal and minus
    .trim();
  
  if (cleaned === '' || isNaN(cleaned)) {
    return null;
  }
  
  return parseFloat(cleaned);
}

/**
 * Convert Excel date format to proper date
 */
function convertExcelDate(dateValue) {
  if (!dateValue) return null;
  
  // Handle invalid/placeholder dates commonly found in lab exports
  const stringValue = String(dateValue).trim();
  if (stringValue === '0000-00-00' || stringValue === '00/00/00' || 
      stringValue === '' || stringValue === '0' || stringValue === 'NULL') {
    return null;
  }
  
  // Handle old epoch dates (12/31/69 = invalid placeholder)
  if (stringValue === '12/31/69' || stringValue === '1969-12-31') {
    return null;
  }
  
  // Handle Excel date format or date strings
  if (!isNaN(dateValue) && dateValue > 25569) {
    // Excel date: days since 1900-01-01
    const excelEpoch = new Date(1899, 11, 30);
    const date = new Date(excelEpoch.getTime() + (dateValue * 24 * 60 * 60 * 1000));
    return date.toISOString().split('T')[0];
  } else if (!isNaN(Date.parse(dateValue))) {
    const parsedDate = new Date(dateValue);
    // Check if date is reasonable (after 1900, before 2100)
    if (parsedDate.getFullYear() > 1900 && parsedDate.getFullYear() < 2100) {
      return parsedDate.toISOString().split('T')[0];
    }
  }
  
  return null;
}

/**
 * Get database column mappings for a specific table and import type
 * Updated for clean unified schema - direct column approach
 */
function getColumnMappings(tableName, importType = 'project') {
  const mappings = {
    collaborators: {
      migration: {
        id_field: 'collaborator_number',
        use_csv_id: true, // Use CSV ID value directly as collaborator_number
        lookup_strategy: 'direct' // Direct query against collaborator_number
      },
      project: {
        id_field: 'collaborator_number', 
        use_sequence: true, // Generate new collaborator_number from sequence
        lookup_strategy: 'direct'
      }
    },
    projects: {
      migration: {
        id_field: 'project_number',
        use_csv_id: true, // Use CSV ID value directly as project_number
        lookup_strategy: 'direct',
        foreign_keys: {
          collaborator_id: { lookup_column: 'collaborator_number' }
        }
      },
      project: {
        id_field: 'project_number',
        use_sequence: true, // Generate new project_number from sequence
        lookup_strategy: 'direct',
        foreign_keys: {
          collaborator_id: { lookup_column: 'collaborator_number' }
        }
      }
    },
    specimens: {
      migration: {
        id_field: 'specimen_number',
        use_sequence: true, // Always generate specimen_number from sequence
        lookup_strategy: 'direct',
        foreign_keys: {
          project_id: { lookup_column: 'project_number' }
        }
      },
      project: {
        id_field: 'specimen_number',
        use_sequence: true, // Always generate specimen_number from sequence
        lookup_strategy: 'direct',
        foreign_keys: {
          project_id: { lookup_column: 'project_number' }
        }
      }
    },
    patients: {
      migration: {
        id_field: 'patient_number',
        use_sequence: true, // Always generate patient_number from sequence
        lookup_strategy: 'external_id', // Lookup by external_id, not patient_number
        external_id_source: 'csv_id' // Use CSV ID as external_id
      },
      project: {
        id_field: 'patient_number',
        use_sequence: true, // Always generate patient_number from sequence
        lookup_strategy: 'external_id', // Lookup by external_id
        external_id_source: 'user_provided' // Use provided external_id field
      }
    }
  };
  
  return mappings[tableName]?.[importType] || {};
}

module.exports = {
  normalizeCollaborator,
  normalizeProject,
  normalizeSpecimen,
  normalizePatient,
  parseBoolean,
  cleanNumericValue,
  convertExcelDate,
  getColumnMappings
};