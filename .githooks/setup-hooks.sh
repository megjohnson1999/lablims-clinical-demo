#!/bin/bash

# Pre-commit Hook Setup Script
# Installs and configures the column naming consistency validator

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

echo -e "${BLUE}${BOLD}Setting up pre-commit hooks for column naming validation...${NC}\n"

# Get the repository root directory
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
HOOKS_DIR="$REPO_ROOT/.git/hooks"
GITHOOKS_DIR="$REPO_ROOT/.githooks"

echo -e "${BLUE}üìÅ Repository root: ${REPO_ROOT}${NC}"
echo -e "${BLUE}üìÅ Git hooks directory: ${HOOKS_DIR}${NC}\n"

# Create .git/hooks directory if it doesn't exist
if [[ ! -d "$HOOKS_DIR" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Git hooks directory not found. Creating it...${NC}"
    mkdir -p "$HOOKS_DIR"
fi

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Error: Node.js is not installed or not in PATH${NC}"
    echo -e "${YELLOW}Please install Node.js to use this pre-commit hook.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Node.js found: $(node --version)${NC}"

# Make the validation script executable
chmod +x "$GITHOOKS_DIR/validate-column-consistency.js"
echo -e "${GREEN}‚úÖ Made validation script executable${NC}"

# Create the pre-commit hook
PRE_COMMIT_HOOK="$HOOKS_DIR/pre-commit"

cat > "$PRE_COMMIT_HOOK" << 'EOF'
#!/bin/bash

# Pre-commit hook to validate column naming consistency
# Generated by setup-hooks.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m' 
BLUE='\033[0;34m'
NC='\033[0m'

# Get repository root
REPO_ROOT="$(git rev-parse --show-toplevel)"

echo -e "${BLUE}üîç Running pre-commit validation...${NC}"

# Run the column consistency validator
node "$REPO_ROOT/.githooks/validate-column-consistency.js"
VALIDATION_EXIT_CODE=$?

if [[ $VALIDATION_EXIT_CODE -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ Pre-commit validation passed!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Pre-commit validation failed!${NC}"
    echo -e "${RED}Commit blocked. Please fix the issues above and try again.${NC}"
    exit 1
fi
EOF

# Make the pre-commit hook executable
chmod +x "$PRE_COMMIT_HOOK"
echo -e "${GREEN}‚úÖ Created and configured pre-commit hook${NC}"

# Test the hook installation
echo -e "\n${BLUE}üß™ Testing hook installation...${NC}"

if [[ -x "$PRE_COMMIT_HOOK" ]]; then
    echo -e "${GREEN}‚úÖ Pre-commit hook is executable${NC}"
else
    echo -e "${RED}‚ùå Pre-commit hook is not executable${NC}"
    exit 1
fi

# Run a quick test of the validation script
echo -e "${BLUE}üß™ Testing validation script...${NC}"
if node "$GITHOOKS_DIR/validate-column-consistency.js" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Validation script runs successfully${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Validation script test had issues (this may be expected if there are existing problems)${NC}"
fi

# Create a configuration file for easy customization
CONFIG_FILE="$GITHOOKS_DIR/hook-config.json"
cat > "$CONFIG_FILE" << 'EOF'
{
  "columnConsistencyHook": {
    "enabled": true,
    "severity": {
      "deprecatedFields": "error",
      "missingColumns": "error", 
      "inconsistentPrimaryKeys": "error",
      "csvHeaderMismatch": "warning",
      "unexpectedFieldAccess": "warning"
    },
    "excludeFiles": [
      "node_modules/",
      ".git/",
      "build/",
      "dist/",
      "coverage/"
    ],
    "entities": [
      "collaborators",
      "projects", 
      "specimens",
      "patients"
    ]
  }
}
EOF

echo -e "${GREEN}‚úÖ Created configuration file: ${CONFIG_FILE}${NC}"

# Create documentation
README_FILE="$GITHOOKS_DIR/README.md"
cat > "$README_FILE" << 'EOF'
# Git Hooks for Column Naming Consistency

This directory contains pre-commit hooks that validate column naming consistency across the LIMS application layers.

## Installed Hooks

### 1. Column Naming Consistency Validator (`validate-column-consistency.js`)

**Purpose**: Prevents commits that introduce column naming inconsistencies between:
- Database schema files
- Frontend React components  
- Import utility functions
- Backend API routes

**Triggers**: Runs automatically before each commit

**Configuration**: Edit `hook-config.json` to customize behavior

## What It Validates

### ‚úÖ Database Schema
- Consistent primary key naming (`id` for UUID columns)
- Required user-friendly ID columns (`*_number` INTEGER)
- Presence of required columns per entity

### ‚úÖ Frontend Components  
- Usage of correct field names (e.g., `project_number` not `project_legacy_id`)
- Detection of deprecated field references
- Validation against expected field sets

### ‚úÖ Import Utilities
- Removal of legacy_id mapping logic
- Consistent CSV header expectations
- Proper column name normalization

### ‚úÖ Backend Routes
- Consistent primary key column references  
- Inclusion of user-friendly IDs in SELECT queries
- Proper field naming in API responses

## Hook Behavior

**üî¥ Errors (Block Commit)**:
- Usage of deprecated fields (`*_legacy_id`)
- Inconsistent primary key column naming
- Missing required database columns
- Legacy ID infrastructure usage

**üü° Warnings (Allow Commit)**:
- Unexpected field access patterns
- Missing CSV header mappings
- Non-critical inconsistencies

## Managing Hooks

### Disable Temporarily
```bash
# Skip hooks for one commit
git commit --no-verify -m "Emergency fix"

# Disable permanently
rm .git/hooks/pre-commit
```

### Re-enable
```bash
# Re-run setup script
./.githooks/setup-hooks.sh
```

### Update Hook Logic
Edit `.githooks/validate-column-consistency.js` and the changes will take effect immediately.

## Testing Hooks Manually

```bash
# Run validation on current working directory
node .githooks/validate-column-consistency.js

# Test with specific files
git add <files>
node .githooks/validate-column-consistency.js
```

## Common Issues & Fixes

### Frontend Display Issues
```javascript
// ‚ùå Deprecated - causes commit to fail
{specimen.project_legacy_id ? specimen.project_legacy_id : specimen.project_id}

// ‚úÖ Correct - passes validation  
{specimen.project_number ? `#${specimen.project_number}` : specimen.project_id}
```

### Import Utility Issues
```javascript
// ‚ùå Legacy approach - causes commit to fail
legacy_id: rawData.ID,
collaborator_legacy_id: rawData.collaborator

// ‚úÖ Direct approach - passes validation
collaborator_number: importType === 'migration' ? parseInt(rawData.ID) : null
```

### Database Schema Issues
```sql
-- ‚ùå Inconsistent - causes commit to fail
CREATE TABLE specimens (uuid UUID PRIMARY KEY, ...)

-- ‚úÖ Consistent - passes validation  
CREATE TABLE specimens (id UUID PRIMARY KEY, ...)
```
EOF

echo -e "${GREEN}‚úÖ Created documentation: ${README_FILE}${NC}"

# Final success message
echo -e "\n${GREEN}${BOLD}üéâ Pre-commit hooks setup completed successfully!${NC}"
echo -e "\n${BLUE}What was installed:${NC}"
echo -e "  üìÑ Pre-commit hook: ${HOOKS_DIR}/pre-commit"
echo -e "  üîç Validator script: ${GITHOOKS_DIR}/validate-column-consistency.js"
echo -e "  ‚öôÔ∏è  Configuration: ${CONFIG_FILE}"
echo -e "  üìö Documentation: ${README_FILE}"

echo -e "\n${BLUE}${BOLD}Next steps:${NC}"
echo -e "1. ${YELLOW}Test the hook:${NC} Try making a commit with column naming issues"
echo -e "2. ${YELLOW}Customize behavior:${NC} Edit hook-config.json if needed"
echo -e "3. ${YELLOW}Share with team:${NC} Commit these hook files so others can run setup-hooks.sh"

echo -e "\n${GREEN}The hooks will now run automatically on every commit to ensure column naming consistency!${NC}"